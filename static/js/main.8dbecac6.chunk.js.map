{"version":3,"sources":["Dice.js","firebase.js","App.js","serviceWorker.js","index.js"],"names":["Dice","props","className","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","auth","provider","firestore","GoogleAuthProvider","databaseRef","database","ref","App","componentDidMount","setState","test","onAuthStateChanged","userAuth","user","state","this","uid","onClick","signInWithPopup","signOut","child","set","Math","random","e","console","log","sendToFirebase","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"4QAYeA,MAJf,SAAcC,GACV,OAAO,yBAAKC,UAAW,QAAhB,S,kCCOXC,IAASC,cAXM,CACbC,OAAQ,0CACRC,WAAY,qCACZC,YAAa,4CACbC,UAAW,qBACXC,cAAe,iCACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAIV,IAAMC,EAAOV,IAASU,OAEvBC,GADmBX,IAASY,YACjB,IAAIZ,IAASU,KAAKG,oBAC7BC,EAAcd,IAASe,WAAWC,M,UCiCzBC,E,kDA9Cb,WAAYnB,GAAQ,IAAD,8BACjB,cAAMA,IAGRoB,kBAAoB,WAClB,EAAKC,SAAS,CAAEC,KAAM,YACtBV,EAAKW,oBAAmB,SAACC,GACvB,EAAKH,SAAS,CAAEI,KAAMD,QALxB,EAAKE,MAAQ,CAAED,KAAM,CAAC,KAAO,SAFZ,E,qDAcjB,OACE,yBAAKxB,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKA,UAAW,cACd,kBAAC,EAAD,MADF,IACW,kBAAC,EAAD,MADX,IACoB,kBAAC,EAAD,MADpB,IAC6B,kBAAC,EAAD,MAD7B,IACsC,kBAAC,EAAD,OAEnC0B,KAAKD,MAAMD,KAAOE,KAAKD,MAAMD,KAAKG,IAAM,GAS3C,4BACEC,QAAS,WDdnB3B,IAASU,OAAOkB,gBAAgBjB,KCaxB,uBAOE,4BAAQgB,QAAS,WDhB3B3B,IAASU,OAAOmB,YCgBN,sBAGA,4BAAQF,QAAS,YDhBtB,WACL,IACEb,EAAYgB,MAAM,SAASC,IAAIC,KAAKC,UACpC,MAAOC,GACPC,QAAQC,IAAIF,ICYoBG,KAAxB,0B,GAxCMC,IAAMC,WCMJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtB,QAAQsB,MAAMA,EAAMC,c","file":"static/js/main.8dbecac6.chunk.js","sourcesContent":["import React from \"react\";\n\n// class Dice extends React.Component {\n//     render() {\n//         return <div className={Dice}>Test</div>\n//     }\n// }\n\nfunction Dice(props) {\n    return <div className={\"Dice\"}>Test</div>\n}\n\nexport default Dice;","import firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport \"firebase/firestore\";\nimport \"firebase/database\";\n\nconst config = {\n  apiKey: \"AIzaSyC7KOTYQcMgdECQNIVpmEpJewN1oerw__8\",\n  authDomain: \"starr-meal-planner.firebaseapp.com\",\n  databaseURL: \"https://starr-meal-planner.firebaseio.com\",\n  projectId: \"starr-meal-planner\",\n  storageBucket: \"starr-meal-planner.appspot.com\",\n  messagingSenderId: \"601980798403\",\n  appId: \"1:601980798403:web:9f1f28e2094c4b60f82976\",\n  measurementId: \"G-HDPNXJY6SD\",\n};\n\nfirebase.initializeApp(config);\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nconst provider = new firebase.auth.GoogleAuthProvider();\nconst databaseRef = firebase.database().ref();\n\nexport const signInWithGoogle = () => {\n  firebase.auth().signInWithPopup(provider);\n};\n\nexport const signOutOfGoogle = () => {\n  firebase.auth().signOut();\n};\n\nexport function sendToFirebase() {\n  try {\n    databaseRef.child(\"todos\").set(Math.random());\n  } catch (e) {\n    console.log(e)\n  }\n}\n","import React from \"react\";\nimport Dice from \"./Dice\";\nimport { signInWithGoogle, signOutOfGoogle, auth, sendToFirebase } from \"./firebase\";\n// import signIn from './firebase';\nimport \"./App.css\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { user: {\"test\":\"test\"} };\n  }\n  componentDidMount = () => {\n    this.setState({ test: \"testing\" });\n    auth.onAuthStateChanged((userAuth) => {\n      this.setState({ user: userAuth});\n    });\n  };\n\n\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <div className={\"horizontal\"}>\n            <Dice /> <Dice /> <Dice /> <Dice /> <Dice />\n          </div>\n            {this.state.user ? this.state.user.uid : \"\"}\n            {/*<div>{this.state.user.email}</div>*/}\n            {/*<div>{this.state.user.displayName}</div>*/}\n            {/*<img src={this.state.user.photoURL} />*/}\n            {/*<div>{Object.keys(this.state.user).map(e => {*/}\n            {/*    return (*/}\n            {/*        <div>{e}</div>*/}\n            {/*    )*/}\n            {/*})}</div>*/}\n          <button\n            onClick={() => {\n              signInWithGoogle();\n            }}\n          >\n            Sign in with Google\n          </button>\n            <button onClick={() =>{ signOutOfGoogle();}}>\n                Sign out of Google\n            </button>\n            <button onClick={() => {sendToFirebase()}}>Send to Firebase</button>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}