{"version":3,"sources":["Dice.js","firebase.js","App.js","serviceWorker.js","index.js"],"names":["Dice","props","className","sendToFirebase","provider","firebase","GoogleAuthProvider","length","databaseURL","type","project_id","private_key_id","private_key","client_email","client_id","auth_uri","token_uri","auth_provider_x509_cert_url","client_x509_cert_url","signInWithPopup","then","result","credential","accessToken","user","console","log","catch","error","code","message","email","ref","child","set","Math","random","App","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2OAYeA,MAJf,SAAcC,GACV,OAAO,yBAAKC,UAAW,QAAhB,S,OCmCIC,MA1Cf,SAAwBF,GACtB,IAAIG,EAAW,IAAIC,OAAcC,mBAkB5BD,OAAcE,QACjBF,gBAlBa,CACbG,YAAa,4CACbC,KAAM,kBACNC,WAAY,qBACZC,eAAgB,2CAEhBC,YAAa,4BACbC,aACE,qEACFC,UAAW,wBACXC,SAAU,4CACVC,UAAW,sCACXC,4BAA6B,6CAC7BC,qBACE,2HAOJb,SAEGc,gBAAgBf,GAChBgB,MAAK,SAAUC,GACFA,EAAOC,WAAWC,YAA9B,IACIC,EAAOH,EAAOG,KAClBC,QAAQC,IAAIF,MAEbG,OAAM,SAAUC,GACCA,EAAMC,KACHD,EAAME,QACbF,EAAMG,MACDH,EAAMN,cAGPjB,aAAoB2B,MAC5BC,MAAM,SAASC,IAAIC,KAAKC,W,MCvBvBC,MAbf,WACE,OACE,yBAAKnC,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKA,UAAW,cACd,kBAAC,EAAD,MADF,IACU,kBAAC,EAAD,MADV,IACkB,kBAAC,EAAD,MADlB,IAC0B,kBAAC,EAAD,MAD1B,IACkC,kBAAC,EAAD,OAEhC,4BAAQoC,QAAS,WAAOnC,EAAe,CAAC,KAAQ,WAAhD,aCAUoC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB/B,MAAK,SAAAgC,GACJA,EAAaC,gBAEd1B,OAAM,SAAAC,GACLH,QAAQG,MAAMA,EAAME,c","file":"static/js/main.6fe27922.chunk.js","sourcesContent":["import React from \"react\";\n\n// class Dice extends React.Component {\n//     render() {\n//         return <div className={Dice}>Test</div>\n//     }\n// }\n\nfunction Dice(props) {\n    return <div className={\"Dice\"}>Test</div>\n}\n\nexport default Dice;","import * as firebase from \"firebase\";\n\nfunction sendToFirebase(props) {\n  let provider = new firebase.auth.GoogleAuthProvider();\n  const config = {\n    databaseURL: \"https://starr-meal-planner.firebaseio.com\",\n    type: \"service_account\",\n    project_id: \"starr-meal-planner\",\n    private_key_id: \"e09578f4e5834e72002ac4572626cfd3f69a323c\",\n    // eslint-disable-next-line\n    private_key: \"${{firebase_private_key}}\",\n    client_email:\n      \"firebase-adminsdk-riq4z@starr-meal-planner.iam.gserviceaccount.com\",\n    client_id: \"106764212743250830411\",\n    auth_uri: \"https://accounts.google.com/o/oauth2/auth\",\n    token_uri: \"https://oauth2.googleapis.com/token\",\n    auth_provider_x509_cert_url: \"https://www.googleapis.com/oauth2/v1/certs\",\n    client_x509_cert_url:\n      \"https://www.googleapis.com/robot/v1/metadata/x509/firebase-adminsdk-riq4z%40starr-meal-planner.iam.gserviceaccount.com\",\n  };\n\n  if (!firebase.apps.length) {\n    firebase.initializeApp(config);\n  }\n\n  firebase\n    .auth()\n    .signInWithPopup(provider)\n    .then(function (result) {\n      let token = result.credential.accessToken;\n      let user = result.user;\n      console.log(user)\n    })\n    .catch(function (error) {\n      let errorCode = error.code;\n      let errorMessage = error.message;\n      let email = error.email;\n      let credential = error.credential;\n    });\n\n  const databaseRef = firebase.database().ref();\n  databaseRef.child(\"todos\").set(Math.random());\n}\n\nexport default sendToFirebase;\n","import React from 'react';\nimport Dice from './Dice';\nimport sendToFirebase from './firebase';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <div className={\"horizontal\"}>\n          <Dice/> <Dice/> <Dice/> <Dice/> <Dice/>\n        </div>\n          <button onClick={() => {sendToFirebase({\"test\": \"test\"})}}>Button</button>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}