{"version":3,"sources":["firebase.js","Header/Header.js","Body/AddIngredient.js","Body/Ingredients.js","Body/UserIdentity.js","Body/AppBody.js","Body/SignedIn.js","Body/NotSignedIn.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","auth","databaseRef","firestore","database","ref","provider","GoogleAuthProvider","Header","className","this","props","user","displayName","React","Component","showIngredientBox","document","getElementsByClassName","style","display","AddIngredient","state","itemName","units","value","handleItemNameChange","bind","handleUnitsChange","submitIngredient","setState","event","target","name","child","set","e","console","log","sendNewIngredientToFirebase","resetState","id","onChange","onClick","Ingredients","componentDidMount","test","onAuthStateChanged","userAuth","on","snapshot","ingredients","val","Object","keys","map","ingredient","remove","removeIngredientFromFirebase","UserIdentity","alt","src","photoURL","AppBody","firebaseValue","Math","random","sendToFirebase","SignedIn","signOut","NotSignedIn","signInWithPopup","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.d3dbebdf.chunk.js","sourcesContent":["import firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport \"firebase/firestore\";\nimport \"firebase/database\";\n\nconst config = {\n  apiKey: \"AIzaSyC7KOTYQcMgdECQNIVpmEpJewN1oerw__8\",\n  authDomain: \"starr-meal-planner.firebaseapp.com\",\n  databaseURL: \"https://starr-meal-planner.firebaseio.com\",\n  projectId: \"starr-meal-planner\",\n  storageBucket: \"starr-meal-planner.appspot.com\",\n  messagingSenderId: \"601980798403\",\n  appId: \"1:601980798403:web:9f1f28e2094c4b60f82976\",\n  measurementId: \"G-HDPNXJY6SD\",\n};\n\nfirebase.initializeApp(config);\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nexport const databaseRef = firebase.database().ref();\nconst provider = new firebase.auth.GoogleAuthProvider();\n\n\nexport const signInWithGoogle = () => {\n  firebase.auth().signInWithPopup(provider);\n};\n\nexport const signOutOfGoogle = () => {\n  firebase.auth().signOut();\n};\n\nexport function sendToFirebase() {\n  try {\n    databaseRef.child(\"todos\").set(Math.random());\n  } catch (e) {\n    console.log(e);\n  }\n}\n\nexport function sendNewIngredientToFirebase(name, units) {\n  try {\n    databaseRef.child(\"Ingredients\").child(name).set({\n      name, units\n    });\n  } catch (e) {\n    console.log(e);\n  }\n}\n\nexport function removeIngredientFromFirebase(name) {\n  try {\n    databaseRef.child(\"Ingredients\").child(name).remove()\n  } catch(e) {\n    console.log(e)\n  }\n}","import React from \"react\";\n\nclass Header extends React.Component {\n  render() {\n    return (\n      <header className=\"App-header\">\n        {this.props.user ? `Hello,  ${this.props.user.displayName}` : \"\"}\n      </header>\n    );\n  }\n}\n\nexport default Header;\n","import React from \"react\";\nimport { sendNewIngredientToFirebase } from \"../firebase\";\n\nexport function showIngredientBox() {\n  let ingredientBox = document.getElementsByClassName(\"add-ingredient\");\n  ingredientBox[0].style.display = \"block\";\n}\n\nexport function hideIngredientBox() {\n  let ingredientBox = document.getElementsByClassName(\"add-ingredient\");\n  ingredientBox[0].style.display = \"None\";\n}\n\nclass AddIngredient extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      itemName: \"\",\n      units: \"\",\n      value: \"\",\n    };\n\n    this.handleItemNameChange = this.handleItemNameChange.bind(this);\n    this.handleUnitsChange = this.handleUnitsChange.bind(this);\n    this.submitIngredient = this.submitIngredient.bind(this);\n  }\n\n  resetState() {\n    this.setState({\n      itemName: \"\",\n      units: \"\",\n    });\n  }\n\n  handleItemNameChange(event) {\n    this.setState({ itemName: event.target.value });\n  }\n\n  handleUnitsChange(event) {\n    this.setState({ units: event.target.value });\n  }\n\n  submitIngredient() {\n    hideIngredientBox();\n    sendNewIngredientToFirebase(this.state.itemName, this.state.units);\n    this.resetState();\n  }\n  render() {\n    return (\n      <div className=\"add-ingredient\">\n        <div>\n          Name:{\" \"}\n          <input\n            id={\"itemName\"}\n            value={this.state.itemName}\n            onChange={this.handleItemNameChange}\n          />\n        </div>\n        <div>\n          {\" \"}\n          Units of Measurement:{\" \"}\n          <input\n            id={\"units\"}\n            value={this.state.units}\n            onChange={this.handleUnitsChange}\n          />\n        </div>\n        <button onClick={this.submitIngredient}>Submit</button>\n      </div>\n    );\n  }\n}\n\nexport default AddIngredient;\n","import React from \"react\";\nimport { auth, databaseRef, removeIngredientFromFirebase } from \"../firebase\";\nimport { showIngredientBox } from \"./AddIngredient\";\n\nclass Ingredients extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n  componentDidMount = () => {\n    this.setState({ test: \"testing\" });\n    auth.onAuthStateChanged((userAuth) => {\n      this.setState({ user: userAuth });\n      databaseRef.child(\"Ingredients\").on(\"value\", (snapshot) => {\n        this.setState({ ingredients: snapshot.val() });\n      });\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"Ingredients\">\n        <div className=\"Ingredient-Header\">Ingredients:</div>\n        <div className={\"Ingredients-List\"}>\n          {this.state.ingredients ? (\n            Object.keys(this.state.ingredients).map((ingredient) => (\n              <div className={\"Ingredient\"}>\n                <button\n                  onClick={() => {\n                    removeIngredientFromFirebase(ingredient);\n                  }}\n                >\n                  x\n                </button>{\" \"}\n                <div>{ingredient}</div>\n              </div>\n            ))\n          ) : (\n            <div></div>\n          )}\n        </div>\n        <div>\n          <button onClick={showIngredientBox}>Add Ingredient</button>\n        </div>\n      </div>\n    );\n  }\n}\nexport default Ingredients;\n","import React from \"react\";\n\nclass UserIdentity extends React.Component {\n  render() {\n    return (\n      <div className={\"UserIdentity\"}>\n        {this.props.user ? (\n          <img alt={\"User\"} src={this.props.user.photoURL} />\n        ) : (\n          \"\"\n        )}\n      </div>\n    );\n  }\n}\n\nexport default UserIdentity;\n","import React from \"react\";\nimport Ingredients from \"./Ingredients\";\nimport UserIdentity from \"./UserIdentity\";\nimport { sendToFirebase } from \"../firebase\";\n\nclass AppBody extends React.Component {\n  render() {\n    return (\n      <div className=\"row-center\">\n        <div className=\"column\">\n          <Ingredients />\n        </div>\n        <div className=\"column\">\n          <UserIdentity user={this.props.user} />\n        </div>\n        <div className=\"column\">\n          <div>\n            <div>{this.props.firebaseValue}</div>\n            <button\n              onClick={() => {\n                sendToFirebase();\n              }}\n            >\n              Send to Firebase\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default AppBody;\n","import React from \"react\";\nimport Header from \"../Header/Header\";\nimport AppBody from \"./AppBody\";\nimport { signOutOfGoogle } from \"../firebase\";\n\nclass SignedIn extends React.Component {\n  render() {\n    return (\n      <div className=\"App-Logged-In\">\n        <div className=\"row\">\n          <Header user={this.props.user} />\n        </div>\n        <AppBody\n          user={this.props.user}\n          firebaseValue={this.props.firebaseValue}\n        />\n        <div className=\"row\">\n          <button\n            onClick={() => {\n              signOutOfGoogle();\n            }}\n          >\n            Sign out of Google\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default SignedIn;\n","import React from \"react\";\nimport { signInWithGoogle } from \"../firebase\";\n\nclass NotSignedIn extends React.Component {\n  render() {\n    return (\n      <div className={\"row\"}>\n        <button\n          onClick={() => {\n            signInWithGoogle();\n          }}\n        >\n          Sign in with Google\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default NotSignedIn;\n","import React from \"react\";\nimport { auth, databaseRef } from \"./firebase\";\nimport \"./App.css\";\nimport SignedIn from \"./Body/SignedIn\";\nimport NotSignedIn from \"./Body/NotSignedIn\";\nimport AddIngredient from \"./Body/AddIngredient\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { firebaseValue: null };\n  }\n\n  componentDidMount = () => {\n    this.setState({ test: \"testing\" });\n    auth.onAuthStateChanged((userAuth) => {\n      this.setState({ user: userAuth });\n      databaseRef.child(\"todos\").on(\"value\", (snapshot) => {\n        this.setState({ firebaseValue: snapshot.val() });\n      });\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <AddIngredient />\n        {this.state.user ? (\n          <SignedIn\n            user={this.state.user}\n            firebaseValue={this.state.firebaseValue}\n          />\n        ) : (\n          <NotSignedIn />\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}